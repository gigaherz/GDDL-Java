plugins {
    id 'java-library'
    id 'maven-publish'
    id("org.javamodularity.moduleplugin") version "1.8.12"
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// As per the modularity plugin readme
//modularity.inferModulePath.set(false)

group 'dev.gigaherz.internal.gddl'
version '2.0.0-alpha.4'

repositories {
    mavenCentral()
    maven {
        url "https://libraries.minecraft.net"
    }
}

sourceSets {
    dynamic {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    demo {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            compileClasspath += dynamic.output
            runtimeClasspath += dynamic.output
            compileClasspath += dynamic.compileClasspath
            runtimeClasspath += dynamic.runtimeClasspath
        }
    }
    test {
        java {
            compileClasspath += dynamic.output
            runtimeClasspath += dynamic.output
            compileClasspath += dynamic.compileClasspath
            runtimeClasspath += dynamic.runtimeClasspath
        }
    }
}

configurations {
    dynamicImplementation.extendsFrom implementation
    demoImplementation.extendsFrom implementation, dynamicImplementation
}

test {
    useJUnitPlatform()
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.1'
    testImplementation 'org.jetbrains:annotations:24.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    testImplementation 'com.google.guava:guava:32.1.3-jre'

    dynamicImplementation 'com.mojang:datafixerupper:6.0.8'
}

jar {
    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title": "GDDL",
                "Specification-Vendor": "gigaherz",
                "Specification-Version": "2.0",
                "Implementation-Title": "GDDL",
                "Implementation-Version": archiveVersion,
                "Implementation-Vendor" :"gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    from sourceSets.main.allSource
    archiveClassifier = 'sources'

    from('/') {
        include 'LICENSE.txt'
    }
}

tasks.register('dynamicJar', Jar) {
    dependsOn classes
    from sourceSets.dynamic.output
    archiveBaseName = "${project.name}-dynamic"
    archiveClassifier = ''

    from('/') {
        include 'LICENSE.txt'
    }

    manifest {
        attributes([
                "Specification-Title"     : "GDDL Dynamic",
                "Specification-Vendor"    : "gigaherz",
                "Specification-Version"   : "2.0",
                "Implementation-Title"    : "GDDL Dynamic",
                "Implementation-Version"  : archiveVersion,
                "Implementation-Vendor"   : "gigaherz",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.register('dynamicSourcesJar', Jar) {
    dependsOn classes
    from sourceSets.dynamic.allSource
    archiveBaseName = "${project.name}-dynamic"
    archiveClassifier = 'sources'

    from('/') {
        include 'LICENSE.txt'
    }
}

artifacts {
    archives sourcesJar, dynamicJar, dynamicSourcesJar
}

tasks.assemble.dependsOn sourcesJar, dynamicJar, dynamicSourcesJar

publishing {
    publications {
        main(MavenPublication) {
            artifactId 'gddl2'

            artifact jar
            artifact sourcesJar
        }
        dynamic(MavenPublication) {
            artifactId 'gddl2-dynamic'

            artifact dynamicJar
            artifact dynamicSourcesJar
        }
    }

    repositories {
        if (findProperty("RELEASE") && System.env.giga_maven_host != null) {
            System.out.println("Remote publish enabled on " + System.env.giga_maven_host)
            maven {
                url System.env.giga_maven_host
                credentials {
                    username System.env.giga_maven_user
                    password System.env.giga_maven_password
                }
            }
        }
        else {
            System.out.println("Remote publish disabled.")
            maven {
                url "$buildDir/repo"
            }
        }
    }
}
